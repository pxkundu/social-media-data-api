name: Terraform CI/CD

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'infrastructure/**'

  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'infrastructure/**'

  workflow_dispatch:

env:
  AWS_REGION: us-east-1 # Default AWS region
  TF_ROOT: infrastructure # Directory containing Terraform code

jobs:
  terraform:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for OIDC authentication
      contents: read # Required to checkout the code
      pull-requests: write # Required to post plan output on PRs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::<YOUR_AWS_ACCOUNT_ID>:role/github-actions-terraform # Replace with your IAM Role ARN
          role-session-name: github-actions-terraform-session
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.x # Specify your desired Terraform version
          # terraform_cloud_organization: your_organization # Uncomment and replace if using Terraform Cloud

      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET_NAME }}" -backend-config="key=${{ env.PROJECT_NAME }}-${{ github.ref_name }}/terraform.tfstate" -backend-config="region=${{ env.AWS_REGION }}" -backend-config="dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}"
        working-directory: ${{ env.TF_ROOT }}

      - name: Terraform Validate
        run: terraform validate -no-color
        working-directory: ${{ env.TF_ROOT }}

      - name: Terraform Format Check
        run: terraform fmt --check
        working-directory: ${{ env.TF_ROOT }}

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.6.1
        with:
          working_directory: ${{ env.TF_ROOT }}
          # soft_fail: true # Uncomment to fail the check but not the workflow

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -var="db_password=${{ secrets.DB_PASSWORD }}" -var="db_username=${{ secrets.DB_USERNAME }}" -var="domain_name=${{ secrets.DOMAIN_NAME }}" -var="certificate_arn=${{ secrets.CERTIFICATE_ARN }}" -var="alb_zone_id=${{ secrets.ALB_ZONE_ID }}" -var="cf_zone_id=${{ secrets.CF_ZONE_ID }}" -out=tfplan
        working-directory: ${{ env.TF_ROOT }}

      - name: Update Pull Request with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('infrastructure/tfplan', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '```terraform\n' + plan + '\n```'
            });

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -var="db_password=${{ secrets.DB_PASSWORD }}" -var="db_username=${{ secrets.DB_USERNAME }}" -var="domain_name=${{ secrets.DOMAIN_NAME }}" -var="certificate_arn=${{ secrets.CERTIFICATE_ARN }}" -var="alb_zone_id=${{ secrets.ALB_ZONE_ID }}" -var="cf_zone_id=${{ secrets.CF_ZONE_ID }}"
        working-directory: ${{ env.TF_ROOT }}

      - name: Terraform Apply on Develop (Manual Approval)
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        run: |
          echo "Deployment to develop requires manual approval."
          # You could integrate with a deployment system or set up environments with required reviewers in GitHub
          # For this example, we'll just run a plan and indicate manual steps are needed.
          terraform plan -no-color -var="db_password=${{ secrets.DB_PASSWORD }}" -var="db_username=${{ secrets.DB_USERNAME }}" -var="domain_name=${{ secrets.DOMAIN_NAME }}" -var="certificate_arn=${{ secrets.CERTIFICATE_ARN }}" -var="alb_zone_id=${{ secrets.ALB_ZONE_ID }}" -var="cf_zone_id=${{ secrets.CF_ZONE_ID }}"
        working-directory: ${{ env.TF_ROOT }} 